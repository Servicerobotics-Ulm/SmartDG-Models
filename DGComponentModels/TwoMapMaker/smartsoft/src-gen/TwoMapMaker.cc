//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "TwoMapMaker.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "TwoMapMakerAcePortFactory.hh"


// initialize static singleton pointer to zero
TwoMapMaker* TwoMapMaker::_twoMapMaker = 0;

// constructor
TwoMapMaker::TwoMapMaker()
{
	std::cout << "constructor of TwoMapMaker\n";
	
	// set all pointer members to NULL
	grayImage1 = NULL;
	grayImage1InputTaskTrigger = NULL;
	grayImage1UpcallManager = NULL;
	grayImage2 = NULL;
	grayImage2InputTaskTrigger = NULL;
	grayImage2UpcallManager = NULL;
	grayImageCollector = NULL;
	grayImageCollectorTrigger = NULL;
	grayMap = NULL;
	image1 = NULL;
	image1InputTaskTrigger = NULL;
	image1UpcallManager = NULL;
	image2 = NULL;
	image2InputTaskTrigger = NULL;
	image2UpcallManager = NULL;
	imageCollector = NULL;
	imageCollectorTrigger = NULL;
	imageJoiner = NULL;
	imageJoinerTrigger = NULL;
	rGBMap = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	
	// set default ini parameter values
	connections.component.name = "TwoMapMaker";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.grayMap.serviceName = "GrayMap";
	connections.grayMap.roboticMiddleware = "ACE_SmartSoft";
	connections.rGBMap.serviceName = "RGBMap";
	connections.rGBMap.roboticMiddleware = "ACE_SmartSoft";
	connections.grayImage1.wiringName = "GrayImage1";
	connections.grayImage1.serverName = "unknown";
	connections.grayImage1.serviceName = "unknown";
	connections.grayImage1.interval = 1;
	connections.grayImage1.roboticMiddleware = "ACE_SmartSoft";
	connections.grayImage2.wiringName = "GrayImage2";
	connections.grayImage2.serverName = "unknown";
	connections.grayImage2.serviceName = "unknown";
	connections.grayImage2.interval = 1;
	connections.grayImage2.roboticMiddleware = "ACE_SmartSoft";
	connections.image1.wiringName = "Image1";
	connections.image1.serverName = "unknown";
	connections.image1.serviceName = "unknown";
	connections.image1.interval = 1;
	connections.image1.roboticMiddleware = "ACE_SmartSoft";
	connections.image2.wiringName = "Image2";
	connections.image2.serverName = "unknown";
	connections.image2.serviceName = "unknown";
	connections.image2.interval = 1;
	connections.image2.roboticMiddleware = "ACE_SmartSoft";
	connections.grayImageCollector.minActFreq = 0.0;
	connections.grayImageCollector.maxActFreq = 0.0;
	// scheduling default parameters
	connections.grayImageCollector.scheduler = "DEFAULT";
	connections.grayImageCollector.priority = -1;
	connections.grayImageCollector.cpuAffinity = -1;
	connections.imageCollector.minActFreq = 0.0;
	connections.imageCollector.maxActFreq = 0.0;
	// scheduling default parameters
	connections.imageCollector.scheduler = "DEFAULT";
	connections.imageCollector.priority = -1;
	connections.imageCollector.cpuAffinity = -1;
	connections.imageJoiner.minActFreq = 0.0;
	connections.imageJoiner.maxActFreq = 0.0;
	// scheduling default parameters
	connections.imageJoiner.scheduler = "DEFAULT";
	connections.imageJoiner.priority = -1;
	connections.imageJoiner.cpuAffinity = -1;
	
	// initialize members of PlainOpcUaTwoMapMakerExtension
	
}

void TwoMapMaker::addPortFactory(const std::string &name, TwoMapMakerPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void TwoMapMaker::addExtension(TwoMapMakerExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* TwoMapMaker::getComponentImpl()
{
	return dynamic_cast<TwoMapMakerAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void TwoMapMaker::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode TwoMapMaker::connectGrayImage1(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = grayImage1->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->grayImage1->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	grayImage1->subscribe(connections.grayImage1.interval);
	return status;
}
Smart::StatusCode TwoMapMaker::connectGrayImage2(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = grayImage2->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->grayImage2->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	grayImage2->subscribe(connections.grayImage2.interval);
	return status;
}
Smart::StatusCode TwoMapMaker::connectImage1(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = image1->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->image1->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	image1->subscribe(connections.image1.interval);
	return status;
}
Smart::StatusCode TwoMapMaker::connectImage2(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = image2->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->image2->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	image2->subscribe(connections.image2.interval);
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode TwoMapMaker::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectGrayImage1(connections.grayImage1.serverName, connections.grayImage1.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGrayImage2(connections.grayImage2.serverName, connections.grayImage2.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectImage1(connections.image1.serverName, connections.image1.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectImage2(connections.image2.serverName, connections.image2.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void TwoMapMaker::startAllTasks() {
	// start task GrayImageCollector
	if(connections.grayImageCollector.scheduler != "DEFAULT") {
		ACE_Sched_Params grayImageCollector_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.grayImageCollector.scheduler == "FIFO") {
			grayImageCollector_SchedParams.policy(ACE_SCHED_FIFO);
			grayImageCollector_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.grayImageCollector.scheduler == "RR") {
			grayImageCollector_SchedParams.policy(ACE_SCHED_RR);
			grayImageCollector_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		grayImageCollector->start(grayImageCollector_SchedParams, connections.grayImageCollector.cpuAffinity);
	} else {
		grayImageCollector->start();
	}
	// start task ImageCollector
	if(connections.imageCollector.scheduler != "DEFAULT") {
		ACE_Sched_Params imageCollector_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.imageCollector.scheduler == "FIFO") {
			imageCollector_SchedParams.policy(ACE_SCHED_FIFO);
			imageCollector_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.imageCollector.scheduler == "RR") {
			imageCollector_SchedParams.policy(ACE_SCHED_RR);
			imageCollector_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		imageCollector->start(imageCollector_SchedParams, connections.imageCollector.cpuAffinity);
	} else {
		imageCollector->start();
	}
	// start task ImageJoiner
	if(connections.imageJoiner.scheduler != "DEFAULT") {
		ACE_Sched_Params imageJoiner_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.imageJoiner.scheduler == "FIFO") {
			imageJoiner_SchedParams.policy(ACE_SCHED_FIFO);
			imageJoiner_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.imageJoiner.scheduler == "RR") {
			imageJoiner_SchedParams.policy(ACE_SCHED_RR);
			imageJoiner_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		imageJoiner->start(imageJoiner_SchedParams, connections.imageJoiner.cpuAffinity);
	} else {
		imageJoiner->start();
	}
}

/**
 * Start all timers contained in this component
 */
void TwoMapMaker::startAllTimers() {
}


Smart::TaskTriggerSubject* TwoMapMaker::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "GrayImage1") return grayImage1InputTaskTrigger;
	if(client == "GrayImage2") return grayImage2InputTaskTrigger;
	if(client == "Image1") return image1InputTaskTrigger;
	if(client == "Image2") return image2InputTaskTrigger;
	
	return NULL;
}


void TwoMapMaker::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		
		// initializations of PlainOpcUaTwoMapMakerExtension
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		TwoMapMakerPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<TwoMapMakerAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition TwoMapMaker is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		grayMap = portFactoryRegistry[connections.grayMap.roboticMiddleware]->createGrayMap(connections.grayMap.serviceName);
		rGBMap = portFactoryRegistry[connections.rGBMap.roboticMiddleware]->createRGBMap(connections.rGBMap.serviceName);
		
		// create client ports
		grayImage1 = portFactoryRegistry[connections.grayImage1.roboticMiddleware]->createGrayImage1();
		grayImage2 = portFactoryRegistry[connections.grayImage2.roboticMiddleware]->createGrayImage2();
		image1 = portFactoryRegistry[connections.image1.roboticMiddleware]->createImage1();
		image2 = portFactoryRegistry[connections.image2.roboticMiddleware]->createImage2();
		
		// create InputTaskTriggers and UpcallManagers
		grayImage1InputTaskTrigger = new Smart::InputTaskTrigger<DGService_DGBasicLink::DGBasicLinkObject>(grayImage1);
		grayImage1UpcallManager = new GrayImage1UpcallManager(grayImage1);
		grayImage2InputTaskTrigger = new Smart::InputTaskTrigger<DGService_DGBasicLink::DGBasicLinkObject>(grayImage2);
		grayImage2UpcallManager = new GrayImage2UpcallManager(grayImage2);
		image1InputTaskTrigger = new Smart::InputTaskTrigger<DGService_DGBasicLink::DGBasicLinkObject>(image1);
		image1UpcallManager = new Image1UpcallManager(image1);
		image2InputTaskTrigger = new Smart::InputTaskTrigger<DGService_DGBasicLink::DGBasicLinkObject>(image2);
		image2UpcallManager = new Image2UpcallManager(image2);
		
		// create input-handler
		
		// create request-handlers
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.grayImage1.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<DGService_DGBasicLink::DGBasicLinkObject>*>(grayImage1)->add(wiringSlave, connections.grayImage1.wiringName);
		}
		if(connections.grayImage2.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<DGService_DGBasicLink::DGBasicLinkObject>*>(grayImage2)->add(wiringSlave, connections.grayImage2.wiringName);
		}
		if(connections.image1.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<DGService_DGBasicLink::DGBasicLinkObject>*>(image1)->add(wiringSlave, connections.image1.wiringName);
		}
		if(connections.image2.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<DGService_DGBasicLink::DGBasicLinkObject>*>(image2)->add(wiringSlave, connections.image2.wiringName);
		}
		
		
		
		// create Task GrayImageCollector
		grayImageCollector = new GrayImageCollector(component);
		// configure input-links
		grayImage1UpcallManager->attach(grayImageCollector);
		grayImage2UpcallManager->attach(grayImageCollector);
		// configure task-trigger (if task is configurable)
		if(connections.grayImageCollector.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.grayImageCollector.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(grayImageCollector);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				grayImageCollectorTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task GrayImageCollector" << std::endl;
			}
		} else if(connections.grayImageCollector.trigger == "DataTriggered") {
			grayImageCollectorTrigger = getInputTaskTriggerFromString(connections.grayImageCollector.inPortRef);
			if(grayImageCollectorTrigger != NULL) {
				grayImageCollectorTrigger->attach(grayImageCollector, connections.grayImageCollector.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.grayImageCollector.inPortRef << " as activation source for Task GrayImageCollector" << std::endl;
			}
		} 
		
		// create Task ImageCollector
		imageCollector = new ImageCollector(component);
		// configure input-links
		image1UpcallManager->attach(imageCollector);
		image2UpcallManager->attach(imageCollector);
		// configure task-trigger (if task is configurable)
		if(connections.imageCollector.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.imageCollector.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(imageCollector);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				imageCollectorTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ImageCollector" << std::endl;
			}
		} else if(connections.imageCollector.trigger == "DataTriggered") {
			imageCollectorTrigger = getInputTaskTriggerFromString(connections.imageCollector.inPortRef);
			if(imageCollectorTrigger != NULL) {
				imageCollectorTrigger->attach(imageCollector, connections.imageCollector.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.imageCollector.inPortRef << " as activation source for Task ImageCollector" << std::endl;
			}
		} 
		
		// create Task ImageJoiner
		imageJoiner = new ImageJoiner(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.imageJoiner.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.imageJoiner.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(imageJoiner);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				imageJoinerTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ImageJoiner" << std::endl;
			}
		} else if(connections.imageJoiner.trigger == "DataTriggered") {
			imageJoinerTrigger = getInputTaskTriggerFromString(connections.imageJoiner.inPortRef);
			if(imageJoinerTrigger != NULL) {
				imageJoinerTrigger->attach(imageJoiner, connections.imageJoiner.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.imageJoiner.inPortRef << " as activation source for Task ImageJoiner" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void TwoMapMaker::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void TwoMapMaker::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	grayImage1UpcallManager->detach(grayImageCollector);
	grayImage2UpcallManager->detach(grayImageCollector);
	// unlink the TaskTrigger
	if(grayImageCollectorTrigger != NULL){
		grayImageCollectorTrigger->detach(grayImageCollector);
		delete grayImageCollector;
	}
	// unlink all UpcallManagers
	image1UpcallManager->detach(imageCollector);
	image2UpcallManager->detach(imageCollector);
	// unlink the TaskTrigger
	if(imageCollectorTrigger != NULL){
		imageCollectorTrigger->detach(imageCollector);
		delete imageCollector;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(imageJoinerTrigger != NULL){
		imageJoinerTrigger->detach(imageJoiner);
		delete imageJoiner;
	}

	// destroy all input-handler

	// destroy InputTaskTriggers and UpcallManagers
	delete grayImage1InputTaskTrigger;
	delete grayImage1UpcallManager;
	delete grayImage2InputTaskTrigger;
	delete grayImage2UpcallManager;
	delete image1InputTaskTrigger;
	delete image1UpcallManager;
	delete image2InputTaskTrigger;
	delete image2UpcallManager;

	// destroy client ports
	delete grayImage1;
	delete grayImage2;
	delete image1;
	delete image2;

	// destroy server ports
	delete grayMap;
	delete rGBMap;
	// destroy event-test handlers (if needed)
	
	// destroy request-handlers
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
	// destruction of PlainOpcUaTwoMapMakerExtension
	
}

void TwoMapMaker::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("TwoMapMaker.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load TwoMapMaker.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: TwoMapMaker.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client GrayImage1
		parameter.getString("GrayImage1", "serviceName", connections.grayImage1.serviceName);
		parameter.getString("GrayImage1", "serverName", connections.grayImage1.serverName);
		parameter.getString("GrayImage1", "wiringName", connections.grayImage1.wiringName);
		parameter.getInteger("GrayImage1", "interval", connections.grayImage1.interval);
		if(parameter.checkIfParameterExists("GrayImage1", "roboticMiddleware")) {
			parameter.getString("GrayImage1", "roboticMiddleware", connections.grayImage1.roboticMiddleware);
		}
		// load parameters for client GrayImage2
		parameter.getString("GrayImage2", "serviceName", connections.grayImage2.serviceName);
		parameter.getString("GrayImage2", "serverName", connections.grayImage2.serverName);
		parameter.getString("GrayImage2", "wiringName", connections.grayImage2.wiringName);
		parameter.getInteger("GrayImage2", "interval", connections.grayImage2.interval);
		if(parameter.checkIfParameterExists("GrayImage2", "roboticMiddleware")) {
			parameter.getString("GrayImage2", "roboticMiddleware", connections.grayImage2.roboticMiddleware);
		}
		// load parameters for client Image1
		parameter.getString("Image1", "serviceName", connections.image1.serviceName);
		parameter.getString("Image1", "serverName", connections.image1.serverName);
		parameter.getString("Image1", "wiringName", connections.image1.wiringName);
		parameter.getInteger("Image1", "interval", connections.image1.interval);
		if(parameter.checkIfParameterExists("Image1", "roboticMiddleware")) {
			parameter.getString("Image1", "roboticMiddleware", connections.image1.roboticMiddleware);
		}
		// load parameters for client Image2
		parameter.getString("Image2", "serviceName", connections.image2.serviceName);
		parameter.getString("Image2", "serverName", connections.image2.serverName);
		parameter.getString("Image2", "wiringName", connections.image2.wiringName);
		parameter.getInteger("Image2", "interval", connections.image2.interval);
		if(parameter.checkIfParameterExists("Image2", "roboticMiddleware")) {
			parameter.getString("Image2", "roboticMiddleware", connections.image2.roboticMiddleware);
		}
		
		// load parameters for server GrayMap
		parameter.getString("GrayMap", "serviceName", connections.grayMap.serviceName);
		if(parameter.checkIfParameterExists("GrayMap", "roboticMiddleware")) {
			parameter.getString("GrayMap", "roboticMiddleware", connections.grayMap.roboticMiddleware);
		}
		// load parameters for server RGBMap
		parameter.getString("RGBMap", "serviceName", connections.rGBMap.serviceName);
		if(parameter.checkIfParameterExists("RGBMap", "roboticMiddleware")) {
			parameter.getString("RGBMap", "roboticMiddleware", connections.rGBMap.roboticMiddleware);
		}
		
		// load parameters for task GrayImageCollector
		parameter.getDouble("GrayImageCollector", "minActFreqHz", connections.grayImageCollector.minActFreq);
		parameter.getDouble("GrayImageCollector", "maxActFreqHz", connections.grayImageCollector.maxActFreq);
		parameter.getString("GrayImageCollector", "triggerType", connections.grayImageCollector.trigger);
		if(connections.grayImageCollector.trigger == "PeriodicTimer") {
			parameter.getDouble("GrayImageCollector", "periodicActFreqHz", connections.grayImageCollector.periodicActFreq);
		} else if(connections.grayImageCollector.trigger == "DataTriggered") {
			parameter.getString("GrayImageCollector", "inPortRef", connections.grayImageCollector.inPortRef);
			parameter.getInteger("GrayImageCollector", "prescale", connections.grayImageCollector.prescale);
		}
		if(parameter.checkIfParameterExists("GrayImageCollector", "scheduler")) {
			parameter.getString("GrayImageCollector", "scheduler", connections.grayImageCollector.scheduler);
		}
		if(parameter.checkIfParameterExists("GrayImageCollector", "priority")) {
			parameter.getInteger("GrayImageCollector", "priority", connections.grayImageCollector.priority);
		}
		if(parameter.checkIfParameterExists("GrayImageCollector", "cpuAffinity")) {
			parameter.getInteger("GrayImageCollector", "cpuAffinity", connections.grayImageCollector.cpuAffinity);
		}
		// load parameters for task ImageCollector
		parameter.getDouble("ImageCollector", "minActFreqHz", connections.imageCollector.minActFreq);
		parameter.getDouble("ImageCollector", "maxActFreqHz", connections.imageCollector.maxActFreq);
		parameter.getString("ImageCollector", "triggerType", connections.imageCollector.trigger);
		if(connections.imageCollector.trigger == "PeriodicTimer") {
			parameter.getDouble("ImageCollector", "periodicActFreqHz", connections.imageCollector.periodicActFreq);
		} else if(connections.imageCollector.trigger == "DataTriggered") {
			parameter.getString("ImageCollector", "inPortRef", connections.imageCollector.inPortRef);
			parameter.getInteger("ImageCollector", "prescale", connections.imageCollector.prescale);
		}
		if(parameter.checkIfParameterExists("ImageCollector", "scheduler")) {
			parameter.getString("ImageCollector", "scheduler", connections.imageCollector.scheduler);
		}
		if(parameter.checkIfParameterExists("ImageCollector", "priority")) {
			parameter.getInteger("ImageCollector", "priority", connections.imageCollector.priority);
		}
		if(parameter.checkIfParameterExists("ImageCollector", "cpuAffinity")) {
			parameter.getInteger("ImageCollector", "cpuAffinity", connections.imageCollector.cpuAffinity);
		}
		// load parameters for task ImageJoiner
		parameter.getDouble("ImageJoiner", "minActFreqHz", connections.imageJoiner.minActFreq);
		parameter.getDouble("ImageJoiner", "maxActFreqHz", connections.imageJoiner.maxActFreq);
		parameter.getString("ImageJoiner", "triggerType", connections.imageJoiner.trigger);
		if(connections.imageJoiner.trigger == "PeriodicTimer") {
			parameter.getDouble("ImageJoiner", "periodicActFreqHz", connections.imageJoiner.periodicActFreq);
		} else if(connections.imageJoiner.trigger == "DataTriggered") {
			parameter.getString("ImageJoiner", "inPortRef", connections.imageJoiner.inPortRef);
			parameter.getInteger("ImageJoiner", "prescale", connections.imageJoiner.prescale);
		}
		if(parameter.checkIfParameterExists("ImageJoiner", "scheduler")) {
			parameter.getString("ImageJoiner", "scheduler", connections.imageJoiner.scheduler);
		}
		if(parameter.checkIfParameterExists("ImageJoiner", "priority")) {
			parameter.getInteger("ImageJoiner", "priority", connections.imageJoiner.priority);
		}
		if(parameter.checkIfParameterExists("ImageJoiner", "cpuAffinity")) {
			parameter.getInteger("ImageJoiner", "cpuAffinity", connections.imageJoiner.cpuAffinity);
		}
		
		// load parameters for PlainOpcUaTwoMapMakerExtension
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
